# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'drone.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import rclpy
from rclpy.node import Node
from rclpy.qos import DurabilityPolicy, HistoryPolicy, QoSProfile

from sensor_msgs.msg import Image
from std_msgs.msg import Int16, String
import math
import numpy as np
import time
import random 

import cv2

import cv2
from cv_bridge import CvBridge


import numpy as np
import cv2

from PyQt5 import *
from PyQt5.QtCore import QTimer
from PyQt5 import QtGui
from PyQt5.QtWidgets import *
from PyQt5.QtWidgets import QWidget, QApplication, QLabel, QVBoxLayout
from PyQt5.QtGui import QPixmap
import sys
import cv2
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread
import numpy as np

strats = [[0,1,2],[0,2,1],[1,0,2],[1,2,0],[2,0,1],[2,1,0]]


class Ui_View(QWidget):
    def __init__(self):
        super().__init__()
        self.disply_width = 791
        self.display_height = 480

        
        self.br = CvBridge()

        # create the video capture thread
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update)
        self.timer.start(5)

        self.runs = 1
        self.succ = 0
        self.stra = [0,0,0]



        rclpy.init(args=None)

        self.sub_Node = Node('Image')
        self.sub = self.sub_Node.create_subscription(
            Image, 'crazyflie/camera/image_raw',self.image_subscriber_callback, 10)
        self.sta = self.sub_Node.create_subscription(
            String, '/status',self.status_callback, 10)
        self.button_publisher = self.sub_Node.create_publisher(Int16, '/target', 10)


        self.sub2 = self.sub_Node.create_subscription(
            String, '/score',self.score_callback, 10)

    def update(self):
        rclpy.spin_once(self.sub_Node)

    def status_callback(self, msgs):
        text = msgs.data
        self.statusLabel.setText(text)
        self.successes.setText(str(self.succ))
        self.totalRuns.setText(str(self.runs))

    def score_callback(self, msg):
        score = msg.data
        score = score.split(',')
        self.stra = score[6:9]
        self.runs = score[9]
        self.succ = score[10]

        _translate = QtCore.QCoreApplication.translate
        for i in range(len(self.stra)):
            item = self.spotList.item(i)
            item.setText(_translate("View", f'hid at Spot {i+1}: x{self.stra[i]}'))



    def closeEvent(self, event):
        self.thread.stop()
        event.accept()

    def clicked1(self):
        msg = Int16()
        msg.data = 0
        self.button_publisher.publish(msg)
    
    def clicked2(self):
        msg = Int16()
        msg.data = 1
        self.button_publisher.publish(msg)

    def clicked3(self):
        msg = Int16()
        msg.data = 2
        self.button_publisher.publish(msg)
        
    def clicked4(self):
        msg = Int16()
        msg.data = 3
        self.button_publisher.publish(msg)
    
    def clicked5(self):
        msg = Int16()
        msg.data = 4
        self.button_publisher.publish(msg)

    def clicked6(self):
        msg = Int16()
        msg.data = 5
        self.button_publisher.publish(msg)
    




    def update_image(self, cv_img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(cv_img)
        self.image_label.setPixmap(qt_img)
    
    def convert_cv_qt(self, cv_img):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(self.disply_width, self.display_height, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)


    def image_subscriber_callback(self, msgs):
        current_frame = self.br.imgmsg_to_cv2(msgs)
        #self.get_logger().info(f"Current Image {current_frame}")) 

        # Convert BGR to HSV colorspace
        current_frame = cv2.cvtColor(current_frame, cv2.COLOR_BGR2RGB)
        hsvFrame = cv2.cvtColor(current_frame, cv2.COLOR_BGR2HSV)

        #blue color
        blue_lower = np.array([94, 80, 2], np.uint8)
        blue_upper = np.array([120, 255, 255], np.uint8)
        blue_mask = cv2.inRange(hsvFrame, blue_lower, blue_upper)


        # to detect only that particular color
        kernal = np.ones((5, 5), "uint8")

        # blue color
        blue_mask = cv2.dilate(blue_mask, kernal)
        res_blue = cv2.bitwise_and(current_frame, current_frame, mask=blue_mask)

        # Creating contour to track blue color
        contours, hierarchy = cv2.findContours(blue_mask,
                                            cv2.RETR_TREE,
                                            cv2.CHAIN_APPROX_SIMPLE)
        
        """
        for pic, contour in enumerate(contours):
            area = cv2.contourArea(contour)
            if (area > 300):
                x, y, w, h = cv2.boundingRect(contour)
                current_frame = cv2.rectangle(current_frame, (x, y),
                                        (x + w, y + h),
                                        (255, 0, 0), 2)

                cv2.putText(current_frame, "Blue Colour", (x, y),
                            cv2.FONT_HERSHEY_SIMPLEX,
                            1.0, (255, 0, 0))

        """
        # final run
        self.update_image(current_frame)



    def setupUi(self, View):
        View.setObjectName("View")
        View.resize(781, 764)
        self.centralwidget = QtWidgets.QWidget(View)
        self.centralwidget.setObjectName("centralwidget")
        self.image_label = QtWidgets.QLabel(self.centralwidget)
        self.image_label.setGeometry(QtCore.QRect(0, 0, 791, 371))
        self.image_label.setObjectName("image_label")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(0, 450, 221, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(280, 450, 221, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(560, 450, 221, 41))
        self.pushButton_3.setObjectName("pushButton_3")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 390, 66, 19))
        self.label.setObjectName("label")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(0, 370, 791, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.statusLabel = QtWidgets.QLabel(self.centralwidget)
        self.statusLabel.setGeometry(QtCore.QRect(80, 390, 371, 19))
        self.statusLabel.setObjectName("statusLabel")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(0, 570, 81, 19))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(0, 550, 121, 19))
        self.label_4.setObjectName("label_4")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(0, 530, 781, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(500, 550, 141, 20))
        self.label_5.setObjectName("label_5")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(480, 540, 20, 191))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.totalRuns = QtWidgets.QLabel(self.centralwidget)
        self.totalRuns.setGeometry(QtCore.QRect(150, 550, 66, 19))
        self.totalRuns.setObjectName("totalRuns")
        self.successes = QtWidgets.QLabel(self.centralwidget)
        self.successes.setGeometry(QtCore.QRect(150, 570, 66, 19))
        self.successes.setObjectName("successes")
        self.spotList = QtWidgets.QListWidget(self.centralwidget)
        self.spotList.setGeometry(QtCore.QRect(650, 550, 121, 171))
        self.spotList.setObjectName("spotList")
        item = QtWidgets.QListWidgetItem()
        self.spotList.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.spotList.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.spotList.addItem(item)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(0, 490, 221, 41))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(280, 490, 221, 41))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(560, 490, 221, 41))
        self.pushButton_6.setObjectName("pushButton_6")
        self.Strategies = QtWidgets.QLabel(self.centralwidget)
        self.Strategies.setGeometry(QtCore.QRect(350, 430, 111, 19))
        self.Strategies.setObjectName("Strategies")
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(0, 410, 791, 20))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        View.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(View)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 781, 24))
        self.menubar.setObjectName("menubar")
        View.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(View)
        self.statusbar.setObjectName("statusbar")
        View.setStatusBar(self.statusbar)

        self.pushButton.clicked.connect(self.clicked1)
        self.pushButton_2.clicked.connect(self.clicked2)
        self.pushButton_3.clicked.connect(self.clicked3)
        self.pushButton_4.clicked.connect(self.clicked4)
        self.pushButton_5.clicked.connect(self.clicked5)
        self.pushButton_6.clicked.connect(self.clicked6)

        self.retranslateUi(View)
        QtCore.QMetaObject.connectSlotsByName(View)

    def retranslateUi(self, View):
        _translate = QtCore.QCoreApplication.translate
        View.setWindowTitle(_translate("View", "Human Search Trial"))
        self.image_label.setText(_translate("View", "TextLabel"))
        self.pushButton.setText(_translate("View", "1 -> 2 -> 3"))
        self.pushButton_2.setText(_translate("View", "1 -> 3 -> 2"))
        self.pushButton_3.setText(_translate("View", "2 -> 1 -> 3"))
        self.label.setText(_translate("View", "Status:"))
        self.statusLabel.setText(_translate("View", "Currently Searching Spot 1"))
        self.label_3.setText(_translate("View", "Successes:"))
        self.label_4.setText(_translate("View", "Amount of Runs"))
        self.label_5.setText(_translate("View", "Last Hidding Spots:"))
        self.totalRuns.setText(_translate("View", "TextLabel"))
        self.successes.setText(_translate("View", "TextLabel"))
        __sortingEnabled = self.spotList.isSortingEnabled()
        self.spotList.setSortingEnabled(False)
        item = self.spotList.item(0)

        for i in range(len(self.stra)):
            item = self.spotList.item(i)
            item.setText(_translate("View", f'hid at Spot {i+1}: x{self.stra[i]}'))

        self.spotList.setSortingEnabled(__sortingEnabled)
        self.pushButton_4.setText(_translate("View", "2 -> 3 -> 1"))
        self.pushButton_5.setText(_translate("View", "3 -> 1 -> 2"))
        self.pushButton_6.setText(_translate("View", "3 -> 2 -> 1"))

        self.Strategies.setText(_translate("View", "Strategies:"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    View = QtWidgets.QMainWindow()
    ui = Ui_View()
    ui.setupUi(View)
    View.show()
    sys.exit(app.exec_())
